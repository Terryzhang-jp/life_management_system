"use client"

import { useState, useEffect, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Plus, Edit2, Trash2, Pin, PinOff, Calendar, MapPin, Image as ImageIcon, X } from "lucide-react"
import { MemoryForm } from "./memory-form"
import { useToast } from "@/hooks/use-toast"

interface MemoryRecord {
  id?: number
  title?: string
  description?: string
  location?: string
  datetime: string
  photos: string[]
  isPinned: boolean
  createdAt?: string
  updatedAt?: string
}

interface PhotoDimensions {
  [key: string]: {
    width: number
    height: number
    aspectRatio: number
  }
}

interface MemoriesGalleryProps {
  className?: string
}

export function MemoriesGallery({ className }: MemoriesGalleryProps) {
  const { toast } = useToast()
  const [memories, setMemories] = useState<MemoryRecord[]>([])
  const [loading, setLoading] = useState(true)
  const [showForm, setShowForm] = useState(false)
  const [editingMemory, setEditingMemory] = useState<MemoryRecord | null>(null)
  const [selectedImage, setSelectedImage] = useState<string | null>(null)
  const [refreshKey, setRefreshKey] = useState(0)
  const [photoDimensions, setPhotoDimensions] = useState<PhotoDimensions>({})

  // 检测照片尺寸
  const loadImageDimensions = useCallback((src: string): Promise<{ width: number; height: number }> => {
    return new Promise((resolve, reject) => {
      const img = new Image()
      img.onload = () => {
        resolve({ width: img.naturalWidth, height: img.naturalHeight })
      }
      img.onerror = reject
      img.src = src
    })
  }, [])

  // 获取照片比例类型
  const getAspectRatioClass = useCallback((aspectRatio: number) => {
    if (aspectRatio > 1.5) {
      // 宽扁型 (landscape)
      return 'md:col-span-2 lg:col-span-2'
    } else if (aspectRatio < 0.75) {
      // 长条型 (portrait)
      return 'md:row-span-2 lg:row-span-2'
    } else {
      // 方形或接近方形
      return ''
    }
  }, [])

  // 获取照片容器高度
  const getImageHeight = useCallback((aspectRatio: number) => {
    if (aspectRatio > 1.5) {
      // 宽扁型 - 较低高度
      return 'h-32'
    } else if (aspectRatio < 0.75) {
      // 长条型 - 较高高度
      return 'h-80'
    } else {
      // 方形 - 标准高度
      return 'h-48'
    }
  }, [])

  // 获取所有记忆
  const fetchMemories = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/memories?type=all')
      if (response.ok) {
        const data = await response.json()
        setMemories(data)

        // 加载所有照片的尺寸信息
        const dimensionsPromises = data.flatMap((memory: MemoryRecord) =>
          memory.photos.map(async (photo: string) => {
            try {
              const dimensions = await loadImageDimensions(photo)
              return {
                src: photo,
                ...dimensions,
                aspectRatio: dimensions.width / dimensions.height
              }
            } catch (error) {
              console.error('Failed to load image dimensions:', error)
              return {
                src: photo,
                width: 400,
                height: 300,
                aspectRatio: 4/3 // 默认比例
              }
            }
          })
        )

        const allDimensions = await Promise.all(dimensionsPromises)
        const dimensionsMap: PhotoDimensions = {}
        allDimensions.forEach(dim => {
          dimensionsMap[dim.src] = {
            width: dim.width,
            height: dim.height,
            aspectRatio: dim.aspectRatio
          }
        })
        setPhotoDimensions(dimensionsMap)
      }
    } catch (error) {
      console.error('Failed to fetch memories:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMemories()
  }, [refreshKey])

  // 处理记忆添加或编辑完成
  const handleMemoryAddedOrEdited = () => {
    setRefreshKey(prev => prev + 1)
    setShowForm(false)
    setEditingMemory(null)
  }

  // 切换置顶状态
  const handleTogglePin = async (id: number) => {
    try {
      const response = await fetch('/api/memories', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id,
          action: 'toggle-pin'
        })
      })

      if (response.ok) {
        toast({
          title: "成功",
          description: "置顶状态已更新"
        })
        setRefreshKey(prev => prev + 1)
      } else {
        const error = await response.json()
        throw new Error(error.error || 'Toggle pin failed')
      }
    } catch (error) {
      console.error('Toggle pin error:', error)
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "切换置顶状态失败",
        variant: "destructive"
      })
    }
  }

  // 删除记忆
  const handleDeleteMemory = async (id: number) => {
    if (!confirm('确定要删除这个记忆吗？此操作不可恢复。')) return

    try {
      const response = await fetch(`/api/memories?id=${id}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        toast({
          title: "成功",
          description: "记忆已删除"
        })
        setRefreshKey(prev => prev + 1)
      } else {
        const error = await response.json()
        throw new Error(error.error || 'Delete failed')
      }
    } catch (error) {
      console.error('Delete error:', error)
      toast({
        title: "删除失败",
        description: error instanceof Error ? error.message : "删除记忆失败",
        variant: "destructive"
      })
    }
  }

  // 开始编辑
  const handleEditMemory = (memory: MemoryRecord) => {
    setEditingMemory(memory)
    setShowForm(true)
  }

  // 格式化时间显示
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // 照片预览
  const openImagePreview = (imageSrc: string) => {
    setSelectedImage(imageSrc)
  }

  const closeImagePreview = () => {
    setSelectedImage(null)
  }

  if (loading) {
    return (
      <div className={`p-6 ${className}`}>
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold">珍贵记忆</h2>
        </div>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3].map(i => (
            <div key={i} className="animate-pulse">
              <div className="bg-gray-200 rounded-lg h-64"></div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className={`p-6 ${className}`}>
      {/* 头部 */}
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">珍贵记忆</h2>
        <Button
          onClick={() => setShowForm(true)}
          className="flex items-center gap-2"
        >
          <Plus className="h-4 w-4" />
          添加记忆
        </Button>
      </div>

      {/* 记忆网格 */}
      {memories.length === 0 ? (
        <div className="text-center py-12">
          <div className="mb-4">
            <ImageIcon className="h-16 w-16 text-gray-300 mx-auto" />
          </div>
          <h3 className="text-lg font-medium text-gray-500 mb-2">还没有记忆</h3>
          <p className="text-gray-400 mb-4">开始记录那些让你有力量的美好时刻</p>
          <Button onClick={() => setShowForm(true)} variant="outline">
            <Plus className="h-4 w-4 mr-2" />
            添加第一个记忆
          </Button>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-4 lg:grid-cols-6 auto-rows-max">
          {memories.map((memory) => {
            const firstPhoto = memory.photos[0]
            const photoDimension = firstPhoto ? photoDimensions[firstPhoto] : null
            const aspectRatio = photoDimension?.aspectRatio || 1
            const gridClasses = getAspectRatioClass(aspectRatio)

            return (
              <Card
                key={memory.id}
                className={`overflow-hidden hover:shadow-lg transition-shadow ${
                  memory.isPinned ? 'ring-2 ring-yellow-400 bg-yellow-50' : ''
                } ${gridClasses}`}
            >
              <CardContent className="p-0">
                {/* 照片显示 */}
                {memory.photos.length > 0 && (
                  <div className="relative">
                    <img
                      src={memory.photos[0]}
                      alt={memory.title || "记忆照片"}
                      className={`w-full ${getImageHeight(aspectRatio)} object-cover cursor-pointer`}
                      onClick={() => openImagePreview(memory.photos[0])}
                    />
                    {memory.photos.length > 1 && (
                      <div className="absolute top-2 right-2 bg-black bg-opacity-60 text-white text-xs px-2 py-1 rounded">
                        +{memory.photos.length - 1}
                      </div>
                    )}
                    {memory.isPinned && (
                      <div className="absolute top-2 left-2 bg-yellow-500 text-white p-1 rounded">
                        <Pin className="h-3 w-3" />
                      </div>
                    )}
                  </div>
                )}

                {/* 内容 */}
                <div className="p-4">
                  {/* 时间和地点 */}
                  <div className="flex items-center gap-4 text-xs text-gray-500 mb-2">
                    <div className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      {formatDate(memory.datetime)}
                    </div>
                    {memory.location && (
                      <div className="flex items-center gap-1">
                        <MapPin className="h-3 w-3" />
                        {memory.location}
                      </div>
                    )}
                  </div>

                  {/* 标题 */}
                  {memory.title && (
                    <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2">
                      {memory.title}
                    </h3>
                  )}

                  {/* 描述 */}
                  {memory.description && (
                    <p className="text-gray-600 text-sm line-clamp-3 mb-3">
                      {memory.description}
                    </p>
                  )}

                  {/* 操作按钮 */}
                  <div className="flex justify-between items-center">
                    <div className="flex gap-1">
                      <Button
                        onClick={() => handleTogglePin(memory.id!)}
                        size="sm"
                        variant="ghost"
                        className="h-8 w-8 p-0"
                        title={memory.isPinned ? "取消置顶" : "置顶"}
                      >
                        {memory.isPinned ? (
                          <PinOff className="h-3 w-3 text-yellow-600" />
                        ) : (
                          <Pin className="h-3 w-3 text-gray-400" />
                        )}
                      </Button>
                      <Button
                        onClick={() => handleEditMemory(memory)}
                        size="sm"
                        variant="ghost"
                        className="h-8 w-8 p-0"
                        title="编辑"
                      >
                        <Edit2 className="h-3 w-3 text-gray-400" />
                      </Button>
                      <Button
                        onClick={() => handleDeleteMemory(memory.id!)}
                        size="sm"
                        variant="ghost"
                        className="h-8 w-8 p-0"
                        title="删除"
                      >
                        <Trash2 className="h-3 w-3 text-gray-400 hover:text-red-500" />
                      </Button>
                    </div>

                    {/* 照片数量指示 */}
                    {memory.photos.length > 0 && (
                      <div className="text-xs text-gray-500 flex items-center gap-1">
                        <ImageIcon className="h-3 w-3" />
                        {memory.photos.length}
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
            )
          })}
        </div>
      )}

      {/* 添加/编辑记忆表单 */}
      {showForm && (
        <MemoryForm
          onMemoryAdded={handleMemoryAddedOrEdited}
          onClose={() => {
            setShowForm(false)
            setEditingMemory(null)
          }}
          editMemory={editingMemory && editingMemory.id ? {
            id: editingMemory.id,
            title: editingMemory.title,
            description: editingMemory.description,
            location: editingMemory.location,
            datetime: editingMemory.datetime,
            photos: editingMemory.photos,
            isPinned: editingMemory.isPinned
          } : undefined}
        />
      )}

      {/* 图片预览模态框 */}
      {selectedImage && (
        <div
          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4"
          onClick={closeImagePreview}
        >
          <div className="relative max-w-4xl max-h-full">
            <img
              src={selectedImage}
              alt="预览"
              className="max-w-full max-h-full object-contain"
            />
            <Button
              onClick={closeImagePreview}
              variant="secondary"
              size="sm"
              className="absolute top-4 right-4"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}